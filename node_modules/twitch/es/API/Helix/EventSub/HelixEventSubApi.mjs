import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { TwitchApiCallType } from 'twitch-api-call';
import { extractUserId, rtfm } from 'twitch-common';
import { BaseApi } from "../../BaseApi.mjs";
import { HelixPaginatedRequestWithTotal } from "../HelixPaginatedRequestWithTotal.mjs";
import { createPaginatedResultWithTotal } from "../HelixPaginatedResult.mjs";
import { HelixEventSubSubscription } from "./HelixEventSubSubscription.mjs";
/**
 * The API methods that deal with WebHooks.
 *
 * Can be accessed using `client.helix.eventSub` on an {@ApiClient} instance.
 *
 * ## Before using these methods...
 *
 * All of the methods in this class assume that you are already running a working EventSub listener at the given callback URL.
 *
 * If you don't already have one, we recommend use of the `twitch-eventsub` library, which handles subscribing and unsubscribing to these topics automatically.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * await api.helix.eventSub.subscribeToUserFollowsTo('125328655', { callbackUrl: 'https://example.com' });
 * ```
 */
var HelixEventSubApi = /** @class */ (function (_super) {
    __extends(HelixEventSubApi, _super);
    function HelixEventSubApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves the current WebHook subscriptions for the current client.
     *
     * Requires an app access token to work; does not work with user tokens.
     */
    HelixEventSubApi.prototype.getSubscriptions = function () {
        return __awaiter(this, void 0, Promise, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({
                            type: TwitchApiCallType.Helix,
                            url: 'eventsub/subscriptions'
                        })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, createPaginatedResultWithTotal(result, HelixEventSubSubscription, this._client)];
                }
            });
        });
    };
    /**
     * Retrieves the current WebHook subscriptions for the current client.
     *
     * Requires an app access token to work; does not work with user tokens.
     */
    HelixEventSubApi.prototype.getSubscriptionsPaginated = function () {
        var _this = this;
        return new HelixPaginatedRequestWithTotal({
            url: 'eventsub/subscriptions'
        }, this._client, function (data) { return new HelixEventSubSubscription(data, _this._client); });
    };
    /**
     * Sends an arbitrary request to subscribe to an event.
     *
     * Requires an app access token to work; does not work with user tokens.
     *
     * @param type The type of the event.
     * @param version The version of the event.
     * @param condition The condition of the subscription.
     * @param transport The transport of the subscription.
     */
    HelixEventSubApi.prototype.createSubscription = function (type, version, condition, transport) {
        return __awaiter(this, void 0, Promise, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({
                            type: TwitchApiCallType.Helix,
                            url: 'eventsub/subscriptions',
                            method: 'POST',
                            jsonBody: {
                                type: type,
                                version: version,
                                condition: condition,
                                transport: transport
                            }
                        })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, new HelixEventSubSubscription(result.data[0], this._client)];
                }
            });
        });
    };
    /**
     * Deletes a subscription.
     *
     * @param id The ID of the subscription.
     */
    HelixEventSubApi.prototype.deleteSubscription = function (id) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({
                            type: TwitchApiCallType.Helix,
                            url: 'eventsub/subscriptions',
                            method: 'DELETE',
                            query: {
                                id: id
                            }
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Subscribe to events that represent a stream going live.
     *
     * @param broadcaster The broadcaster you want to listen to online events for.
     * @param transport The transport options
     */
    HelixEventSubApi.prototype.subscribeToStreamOnlineEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('stream.online', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a stream going offline.
     *
     * @param broadcaster The broadcaster you want to listen to online events for.
     * @param transport The transport options
     */
    HelixEventSubApi.prototype.subscribeToStreamOfflineEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('stream.offline', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a channel updating their metadata.
     *
     * @param broadcaster The broadcaster you want to listen to update events for.
     * @param transport The transport options
     */
    HelixEventSubApi.prototype.subscribeToChannelUpdateEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.update', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a user following a channel.
     *
     * @param broadcaster  The broadcaster you want to listen to follow events for.
     * @param transport The transport options
     */
    HelixEventSubApi.prototype.subscribeToChannelFollowEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.follow', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a user subscribing to a channel.
     *
     * @param broadcaster The broadcaster you want to listen to subscribe events for.
     * @param transport The transport options
     */
    HelixEventSubApi.prototype.subscribeToChannelSubscriptionEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.subscribe', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a user cheering bits to a channel.
     *
     * @param broadcaster The broadcaster you want to listen to cheer events for.
     * @param transport The transport options.
     */
    HelixEventSubApi.prototype.subscribeToChannelCheerEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.cheer', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a user being banned in a channel.
     *
     * @param broadcaster The broadcaster you want to listen to ban events for.
     * @param transport The transport option.
     */
    HelixEventSubApi.prototype.subscribeToChannelBanEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.ban', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a user being unbanned in a channel.
     *
     * @param broadcaster The broadcaster you want to listen to unban events for.
     * @param transport The transport options.
     */
    HelixEventSubApi.prototype.subscribeToChannelUnbanEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.unban', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a Channel Points reward being added to a channel.
     *
     * @param broadcaster The broadcaster you want to listen to reward add events for.
     * @param transport The transport options.
     */
    HelixEventSubApi.prototype.subscribeToChannelRewardAddEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.channel_points_custom_reward.add', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a Channel Points reward being updated in a channel.
     *
     * @param broadcaster The broadcaster you want to listen to reward update events for.
     * @param transport The transport options
     */
    HelixEventSubApi.prototype.subscribeToChannelRewardUpdateEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.channel_points_custom_reward.update', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a specific Channel Points reward being updated.
     *
     * @param broadcaster The broadcaster you want to listen to reward update events for.
     * @param rewardId The ID of the reward you want to listen to update events for.
     * @param transport The transport options.
     */
    HelixEventSubApi.prototype.subscribeToChannelRewardUpdateEventsForReward = function (broadcaster, rewardId, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.channel_points_custom_reward.update', '1', { broadcaster_user_id: extractUserId(broadcaster), reward_id: rewardId }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a Channel Points reward being removed from a channel.
     *
     * @param broadcaster The broadcaster you want to listen to reward remove events for.
     * @param transport The transport options.
     */
    HelixEventSubApi.prototype.subscribeToChannelRewardRemoveEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.channel_points_custom_rewards.remove', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a specific Channel Points reward being removed from a channel.
     *
     * @param broadcaster The broadcaster you want to listen to reward remove events for.
     * @param rewardId The ID of the reward you want to listen to remove events for.
     * @param transport The transport events.
     */
    HelixEventSubApi.prototype.subscribeToChannelRewardRemoveEventsForReward = function (broadcaster, rewardId, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.channel_points_custom_reward.remove', '1', { broadcaster_user_id: extractUserId(broadcaster), reward_id: rewardId }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a Channel Points reward being redeemed.
     *
     * @param broadcaster The broadcaster you want to listen to redemption events for.
     * @param transport The transport options.
     */
    HelixEventSubApi.prototype.subscribeToChannelRedemptionAddEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.channel_points_custom_reward_redemption.add', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a specific Channel Points reward being redeemed.
     *
     * @param broadcaster The broadcaster you want to listen to redemption events for.
     * @param rewardId The ID of the reward you want to listen to redemption events for.
     * @param transport The transport options.
     */
    HelixEventSubApi.prototype.subscribeToChannelRedemptionAddEventsForReward = function (broadcaster, rewardId, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.channel_points_custom_reward_redemption.add', '1', { broadcaster_user_id: extractUserId(broadcaster), reward_id: rewardId }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a Channel Points redemption being updated.
     *
     * @param broadcaster The broadcaster you want to listen to redemption update events for.
     * @param transport The transport options.
     */
    HelixEventSubApi.prototype.subscribeToChannelRedemptionUpdateEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.channel_points_custom_reward_redemption.update', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a specific Channel Points reward's redemption being updated.
     *
     * @param broadcaster The broadcaster you want to listen to redemption update events for.
     * @param rewardId The ID of the reward you want to listen to redemption updates for.
     * @param transport The transport options.
     */
    HelixEventSubApi.prototype.subscribeToChannelRedemptionUpdateEventsForReward = function (broadcaster, rewardId, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.channel_points_custom_reward_redemption.update', '1', { broadcaster_user_id: extractUserId(broadcaster), reward_id: rewardId }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent the beginning of a Hype Train event in a channel.
     *
     * @param broadcaster The broadcaster you want to listen to Hype train begin events for.
     * @param transport The transport options.
     */
    HelixEventSubApi.prototype.subscribeToChannelHypeTrainBeginEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.hype_train.begin', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent progress towards the Hype Train goal.
     *
     * @param broadcaster The broadcaster for which you want to listen to Hype Train progress events for.
     * @param transport The transport options.
     */
    HelixEventSubApi.prototype.subscribeToChannelHypeTrainProgressEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.hype_train.progress', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent the end of a Hype Train event.
     *
     * @param broadcaster The broadcaster for which you want to listen to Hype Train end events for.
     * @param transport The transport options.
     */
    HelixEventSubApi.prototype.subscribeToChannelHypeTrainEndEvents = function (broadcaster, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('channel.hype_train.end', '1', { broadcaster_user_id: extractUserId(broadcaster) }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a user revoking their authorization from an application.
     *
     * @param clientId The Client ID for the application you want to listen to authorization revoke events for.
     * @param transport The transport options.
     */
    HelixEventSubApi.prototype.subscribeToUserAuthorizationRevokeEvents = function (clientId, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('user.authorization.revoke', '1', { client_id: clientId }, transport)];
            });
        });
    };
    /**
     * Subscribe to events that represent a user updating their account details.
     *
     * @param user The user you want to listen to user update events for.
     * @param transport The transport options.
     */
    HelixEventSubApi.prototype.subscribeToUserUpdateEvents = function (user, transport) {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createSubscription('user.update', '1', { user_id: extractUserId(user) }, transport)];
            });
        });
    };
    HelixEventSubApi = __decorate([
        rtfm('twitch', 'HelixEventSubApi')
    ], HelixEventSubApi);
    return HelixEventSubApi;
}(BaseApi));
export { HelixEventSubApi };
