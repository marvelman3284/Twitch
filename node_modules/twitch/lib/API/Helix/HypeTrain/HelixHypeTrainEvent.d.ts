import type { ApiClient } from '../../../ApiClient';
import type { HelixUser } from '../User/HelixUser';
import type { HelixHypeTrainContributionData } from './HelixHypeTrainContribution';
import { HelixHypeTrainContribution } from './HelixHypeTrainContribution';
/** @private */
export interface HelixHypeTrainEventData {
    id: string;
    broadcaster_id: string;
    cooldown_end_time: string;
    expires_at: string;
    goal: number;
    last_contribution: HelixHypeTrainContributionData;
    level: number;
    started_at: string;
    top_contributions: HelixHypeTrainContributionData[];
    total: number;
}
/**
 * A Hype Train event.
 */
export declare class HelixHypeTrainEvent {
    private readonly _data;
    private readonly _client;
    /** @private */
    constructor(data: HelixHypeTrainEventData, client: ApiClient);
    /**
     * The ID of the Hype Train event.
     */
    get id(): string;
    /**
     * The user ID of the broadcaster where the Hype Train event was triggered.
     */
    get broadcasterId(): string;
    /**
     * Retrieves more information about the broadcaster where the Hype Train event was triggered.
     */
    getBroadcaster(): Promise<HelixUser | null>;
    /**
     * The level of the Hype Train event.
     */
    get level(): number;
    /**
     * The time when the Hype Train started.
     */
    get startDate(): Date;
    /**
     * The time when the Hype Train is set to expire.
     */
    get expiryDate(): Date;
    /**
     * The total amount of progress points of the Hype Train event.
     */
    get total(): number;
    /**
     * The last contribution to the Hype Train event.
     */
    get lastContribution(): HelixHypeTrainContribution;
    /**
     * Array list of the top contributions to the Hype Train event for bits and subs.
     */
    get topContributions(): HelixHypeTrainContribution[];
}
